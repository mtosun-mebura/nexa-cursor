name: Deploy to Production

on:
  push:
    branches: [ main ]  # Verander naar gewenste branch
  pull_request:
    types: [closed]
    branches: [ main ]  # Verander naar gewenste branch
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted  # Changed from ubuntu-latest to run on your server
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Git pull latest code in /var/www/nexa
      run: |
        echo "üì• Pulling latest code from repository..."
        
        # Zorg dat directory bestaat
        if [ ! -d "/var/www/nexa" ]; then
          echo "‚ùå Error: /var/www/nexa does not exist!"
          echo "Please initialize git repository first with:"
          echo "  cd /var/www/nexa"
          echo "  git init"
          echo "  git remote add origin <your-repo-url>"
          echo "  git fetch origin"
          echo "  git checkout -b main origin/main"
          exit 1
        fi
        
        # Ga naar deployment directory
        cd /var/www/nexa
        
        # Check of het een git repository is
        if [ ! -d ".git" ]; then
          echo "‚ùå Error: /var/www/nexa is not a git repository!"
          exit 1
        fi
        
        # Create backup voordat we pullen
        echo "üíæ Creating backup..."
        sudo cp -r /var/www/nexa /var/www/nexa-backup-$(date +%Y%m%d-%H%M%S)
        
        # Pull latest changes
        echo "üîÑ Fetching and pulling latest changes..."
        git fetch origin
        git reset --hard origin/main
        git clean -fd
        
        echo "‚úÖ Git pull completed successfully!"
        git log -1 --oneline
          
    - name: Build and prepare application
      run: |
        cd /var/www/nexa
          
        # Create necessary Laravel directories
        mkdir -p backend/bootstrap/cache
        mkdir -p backend/storage/framework/{cache,sessions,views}
        mkdir -p backend/storage/logs
        mkdir -p backend/storage/app/public
        
        # Copy .env if not exists
        if [ ! -f backend/.env ]; then
          cp backend/.env.example backend/.env
          # Generate app key later in container
        fi
        
        # Install NPM dependencies and build assets (outside container)
        cd backend
        npm ci
        npm run build
        
    - name: Build Docker containers
      run: |
        cd /var/www/nexa
        
        echo "üê≥ Building Docker containers..."
        
        # Stop existing containers
        docker-compose -f docker-compose.prod.yml down || true
        
        # Build containers
        docker-compose -f docker-compose.prod.yml build --no-cache backend
        
        echo "‚úÖ Docker build completed!"
        
    - name: Prepare Laravel setup
      run: |
        cd /var/www/nexa
        
        echo "üîß Preparing Laravel configuration..."
        
        # Start containers tijdelijk voor setup
        docker-compose -f docker-compose.prod.yml up -d
        
        # Wait for containers
        echo "‚è≥ Waiting for containers to be ready..."
        sleep 10
        
        # Generate app key if needed
        echo "üîë Generating app key..."
        docker-compose -f docker-compose.prod.yml exec -T backend php artisan key:generate --force || true
        
        # Run migrations
        echo "üìä Running database migrations..."
        docker-compose -f docker-compose.prod.yml exec -T backend php artisan migrate --force
        
        # Clear and cache Laravel config
        echo "üóëÔ∏è  Clearing caches..."
        docker-compose -f docker-compose.prod.yml exec -T backend php artisan config:clear
        docker-compose -f docker-compose.prod.yml exec -T backend php artisan cache:clear
        
        echo "üì¶ Caching configuration..."
        docker-compose -f docker-compose.prod.yml exec -T backend php artisan config:cache
        docker-compose -f docker-compose.prod.yml exec -T backend php artisan route:cache
        docker-compose -f docker-compose.prod.yml exec -T backend php artisan view:cache
        
        # Create storage link
        echo "üîó Creating storage symlink..."
        docker-compose -f docker-compose.prod.yml exec -T backend php artisan storage:link || true
        
        # Stop containers na setup
        echo "üõë Stopping containers after setup..."
        docker-compose -f docker-compose.prod.yml down
        
        echo "‚úÖ Laravel setup completed!"
        
    - name: Set permissions
      run: |
        # Set ownership for Laravel directories
        sudo chown -R $USER:www-data /var/www/nexa/backend/storage
        sudo chown -R $USER:www-data /var/www/nexa/backend/bootstrap/cache
        sudo chmod -R 775 /var/www/nexa/backend/storage
        sudo chmod -R 775 /var/www/nexa/backend/bootstrap/cache
          
    - name: Start Docker container on port 8000
      run: |
        cd /var/www/nexa
        
        echo "üöÄ Starting Docker containers..."
        
        # Start all containers
        docker-compose -f docker-compose.prod.yml up -d
        
        # Wait for startup
        echo "‚è≥ Waiting for application to start..."
        sleep 5
        
        # Show container status
        echo "üìä Container status:"
        docker-compose -f docker-compose.prod.yml ps
        
        # Reload Nginx
        echo "üîÑ Reloading Nginx..."
        sudo systemctl reload nginx || true
        
        echo "‚úÖ Docker containers started on port 8000!"
        
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        
        # Check if application is accessible on port 8000
        if curl -f http://localhost:8000 > /dev/null 2>&1; then
          echo "‚úÖ Application is accessible on port 8000"
        else
          echo "‚ö†Ô∏è  Warning: Application not responding on port 8000"
          echo "Checking container logs..."
          docker-compose -f /var/www/nexa/docker-compose.prod.yml logs --tail=20 backend
        fi
        
        # Check via Nginx
        if curl -f http://localhost > /dev/null 2>&1; then
          echo "‚úÖ Application is accessible via Nginx"
        else
          echo "‚ö†Ô∏è  Warning: Application not responding via Nginx"
        fi
        
        echo ""
        echo "üéâ Deployment completed successfully!"
        echo "üìç Application running on: http://192.168.178.116:8000"
        echo "üìç Via Nginx: http://192.168.178.116"

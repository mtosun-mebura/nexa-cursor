name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted

    env:
      DEPLOY_DIR: /var/www/nexa
      COMPOSE_FILE: docker-compose.prod.yml
      BACKEND_DIR: /var/www/nexa/backend

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Rsync code to server deploy dir
        run: |
          set -e
          echo "üìÇ Syncing repo -> $DEPLOY_DIR"
          mkdir -p "$DEPLOY_DIR"
          rsync -a --delete --exclude '.git' ./ "$DEPLOY_DIR"/
          echo "‚úÖ Synced to $DEPLOY_DIR"

      - name: Ensure Laravel dirs & .env exist
        run: |
          set -e
          cd "$BACKEND_DIR"
          mkdir -p bootstrap/cache \
                   storage/framework/{cache,sessions,views} \
                   storage/logs \
                   public/build
          if [ ! -f .env ]; then
            echo "‚ö†Ô∏è  backend/.env ontbreekt; kopieer .env.example -> .env (pas waarden aan in server .env)"
            cp .env.example .env
          fi
          echo "‚úÖ Laravel dirs klaar"

      - name: Build Vite assets (production)
        run: |
          set -e
          cd "$BACKEND_DIR"
          npm ci
          npm run build
          test -f public/build/manifest.json
          echo "‚úÖ Vite manifest aanwezig"
          
          # Fix permissions voor build directory
          sudo chown -R $USER:www-data public/build
          sudo chmod -R 755 public/build
          echo "‚úÖ Build directory permissions OK"

      - name: Pick docker compose (v2/v1)
        id: pickdc
        shell: bash
        run: |
          if docker compose version >/dev/null 2>&1; then
            echo "dc=docker compose" >> $GITHUB_OUTPUT
          else
            echo "dc=docker-compose" >> $GITHUB_OUTPUT
          fi

      - name: Ensure .env and APP_KEY
        run: |
          set -e
          cd /var/www/nexa/backend
          [ -f .env ] || cp .env.example .env
          # Voeg een APP_KEY toe als hij ontbreekt
          if ! grep -q '^APP_KEY=' .env; then
            KEY=$(php -r "echo 'base64:'.base64_encode(random_bytes(32));")
            printf '\nAPP_KEY=%s\n' "$KEY" >> .env
            echo "APP_KEY added to .env"
          else
            echo "APP_KEY present"
          fi

      - name: Build & start containers
        run: |
          set -e
          cd "$DEPLOY_DIR"
          ${ { steps.pickdc.outputs.dc } } -f "$COMPOSE_FILE" down --remove-orphans || true
          ${ { steps.pickdc.outputs.dc } } -f "$COMPOSE_FILE" build --no-cache
          ${ { steps.pickdc.outputs.dc } } -f "$COMPOSE_FILE" up -d
          echo "‚è≥ Wachten tot backend luistert..."
          sleep 6
          curl -f http://127.0.0.1:8000 -I || (echo "‚ùå Backend luistert niet op :8000" && exit 1)
          echo "‚úÖ Backend OK op :8000"

      - name: Laravel post-deploy
        run: |
          cd /var/www/nexa
          docker compose -f docker-compose.prod.yml exec -T backend php artisan config:clear
          docker compose -f docker-compose.prod.yml exec -T backend php artisan key:generate --force || true
          docker compose -f docker-compose.prod.yml exec -T backend php artisan config:cache

      - name: Laravel post-deploy (in container)
        run: |
          set -e
          cd "$DEPLOY_DIR"
          ${ { steps.pickdc.outputs.dc } } -f "$COMPOSE_FILE" exec -T backend php artisan key:generate --force || true
          ${ { steps.pickdc.outputs.dc } } -f "$COMPOSE_FILE" exec -T backend php artisan migrate --force
          ${ { steps.pickdc.outputs.dc } } -f "$COMPOSE_FILE" exec -T backend php artisan config:clear
          ${ { steps.pickdc.outputs.dc } } -f "$COMPOSE_FILE" exec -T backend php artisan cache:clear
          ${ { steps.pickdc.outputs.dc } } -f "$COMPOSE_FILE" exec -T backend php artisan route:clear
          ${ { steps.pickdc.outputs.dc } } -f "$COMPOSE_FILE" exec -T backend php artisan view:cache
          ${ { steps.pickdc.outputs.dc } } -f "$COMPOSE_FILE" exec -T backend php artisan storage:link || true
          echo "‚úÖ Laravel caches & migraties voltooid"

      - name: Fix permissions for runtime dirs
        run: |
          set -e
          sudo chown -R $USER:www-data "$BACKEND_DIR"/storage "$BACKEND_DIR"/bootstrap/cache
          sudo chmod -R 775 "$BACKEND_DIR"/storage "$BACKEND_DIR"/bootstrap/cache
          echo "‚úÖ Permissies OK"

      - name: Reload Nginx
        run: |
          sudo systemctl reload nginx || true
          echo "‚úÖ Nginx reloaded"

      - name: Verify via Nginx
        run: |
          set -e
          curl -f https://nexa.tosun.nl -I || (echo "‚ùå Nginx pad faalt" && exit 1)
          echo "üéâ Deployment succesvol"
